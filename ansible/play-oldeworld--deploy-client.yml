---
- name: Deploy Oldeworld Cluster - Client
  hosts: localhost
  gather_facts: false
  vars:
    azure_devops_org: 'freecodecamp-org'
    azure_devops_project: 'freecodecamp'
    branch_name: "{{ variable_branch_name | default('null') }}"
    api_version: '7.2-preview'
    azure_devops_token: "{{ lookup('env', 'AZURE_DEVOPS_TOKEN') }}"

  tasks:
    - name: Exit if branch name is not set
      fail:
        msg: 'Branch name is not set'
      when: branch_name == 'null'
    - name: Set build definition ID for PRD
      set_fact:
        build_definition_id: 30
        deployment_environment: prd
      when: variable_branch_name == 'prod-current'

    - name: Set build definition ID for STG
      set_fact:
        build_definition_id: 29
        deployment_environment: stg
      when: variable_branch_name == 'prod-staging'

    - name: Get latest build ID
      uri:
        url:
          'https://dev.azure.com/{{ azure_devops_org }}/{{ azure_devops_project
          }}/_apis/build/latest/{{ build_definition_id }}?branchName={{
          branch_name }}&api-version={{ api_version }}'
        method: GET
        user: '{{ azure_devops_token }}'
        password: ''
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: build_response

    - name: Set build ID and build number
      set_fact:
        build_id: '{{ build_response.json.id }}'
        build_number: '{{ build_response.json.buildNumber }}'
        languages:
          - eng
          - chn
          - esp
          - cnt
          - ita
          - por
          - ukr
          - jpn
          - ger
          - swa

    - name: Process artifact information
      set_fact:
        artifacts:
          '{{ artifacts | default([]) + [{ "language": item, "tarball":
          build_number + "-" + build_id + "-" + item + ".tar" }] }}'
      loop: '{{ languages }}'

    - name: Create a host group and add pre-defined groups to it
      add_host:
        name:
          '{{ deployment_environment }}-vm-oldeworld-clt-{{ item[0].language
          }}-{{ item[1] }}'
        groups:
          - client_hosts
        artifact_tar: '{{ item[0].tarball }}'
        build_id: '{{ build_id }}'
        build_number: '{{ build_number }}'
        deployment_environment: '{{ deployment_environment }}'
      loop: '{{ artifacts | product(["0","1"]) | list }} '
      loop_control:
        label: '{{ item[0].language }}'

- name: Upload Client Artifacts
  hosts: client_hosts
  become: true
  become_user: freecodecamp
  become_method: sudo
  gather_facts: false
  vars:
    temp_dir: '/tmp/{{ build_number }}'
    access_key_id: "{{ lookup('env', 'LINODE_OS_ACCESS_KEY_ID') }}"
    secret_access_key: "{{ lookup('env', 'LINODE_OS_SECRET_ACCESS_KEY') }}"

  tasks:
    - name: Debug host information
      debug:
        msg: 'Uploading {{ artifact_tar }} to {{ inventory_hostname }}'

    - name: Install Rclone
      ansible.builtin.shell:
        rclone version || curl https://rclone.org/install.sh | sudo bash
      become: true
      become_method: sudo

    - name: Create Rclone config for Linode Object Storage
      ansible.builtin.command:
        rclone config create crl s3 access_key_id={{ access_key_id }}
        secret_access_key={{ secret_access_key }}
        endpoint=us-east-1.linodeobjects.com provider=Linode
      no_log: true
      register: create_rclone_config
      changed_when: true

    - name: Remove directory for artifacts if it exists
      ansible.builtin.file:
        path: '{{ temp_dir }}'
        state: absent
      changed_when: true

    - name: Create directory for artifacts
      ansible.builtin.file:
        path: '{{ temp_dir }}'
        state: directory
        mode: '0755'
        owner: freecodecamp
      register: create_temp_dir
      changed_when: true

    - name: Download artifact with rclone if checksum differs
      shell: >
        rclone copy crl:/{{ deployment_environment }}-releases/{{ artifact_tar
        }} {{temp_dir }} --checksum
      register: rclone_copy
      changed_when: rclone_copy.rc == 0

    - name: Create unpacked directory
      ansible.builtin.file:
        path: '{{ temp_dir }}/unpacked'
        state: directory
        mode: '0755'
        owner: freecodecamp
      register: create_unpacked_dir
      changed_when: false

    - name: Extract artifact
      ansible.builtin.unarchive:
        src: '{{ temp_dir }}/{{ artifact_tar }}'
        dest: '{{ temp_dir }}/unpacked'
        remote_src: yes
        mode: '0755'
        owner: freecodecamp
      register: extract_artifact
      changed_when: extract_artifact.changed

    - name: Create the final destination directory
      ansible.builtin.file:
        path:
          '/home/freecodecamp/client/releases/{{ build_number }}-{{ build_id }}'
        state: directory
        mode: '0755'
        owner: freecodecamp
      register: create_final_dir
      changed_when: true

    - name: Copy artifacts to the final destination
      ansible.builtin.shell: |
        shopt -s dotglob nullglob
        mv {{ temp_dir }}/unpacked/client/public/* '/home/freecodecamp/client/releases/{{ build_number }}-{{ build_id }}/'
      args:
        executable: /bin/bash
      register: copy_artifacts
      changed_when: copy_artifacts.rc == 0

    - name: Check permissions
      shell:
        cmd: |
          ls -hal '/home/freecodecamp/client/releases/{{ build_number }}-{{ build_id }}' | grep 'index.html'
      register: check_permissions

    - name: Print permissions
      debug:
        var: check_permissions.stdout
      when: check_permissions.rc == 0

    - name: Cleanup temporary directory
      ansible.builtin.file:
        path: '{{ temp_dir }}'
        state: absent
      changed_when: true

- name: Restart Client
  hosts: client_hosts
  serial: 1
  become: true
  become_user: freecodecamp
  become_method: sudo
  gather_facts: false

  tasks:
    - name: Restart Client
      shell:
        cmd: |
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ]
          printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
          export CLIENT_BINARIES="{{ build_number }}-{{build_id}}"
          npm install -g serve@13
          rm client-start-primary.sh
          echo "serve -c ../../serve.json releases/$CLIENT_BINARIES -p 50505" >> client-start-primary.sh
          chmod +x client-start-primary.sh
          pm2 delete client-primary
          pm2 start  ./client-start-primary.sh --name client-primary
          rm client-start-secondary.sh
          echo "serve -c ../../serve.json releases/$CLIENT_BINARIES -p 52525" >> client-start-secondary.sh
          chmod +x client-start-secondary.sh
          pm2 delete client-secondary
          pm2 start  ./client-start-secondary.sh --name client-secondary
          pm2 save
        chdir: /home/freecodecamp/client
        executable: /bin/bash
