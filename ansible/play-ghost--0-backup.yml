---
- name: Backup Ghost Database and Content
  hosts: "{{ variable_host | default('null') }}"
  serial: 1
  become: true
  become_user: freecodecamp
  become_method: sudo
  vars:
    lang_code: "{{ inventory_hostname.split('-')[-1] }}"
    backup_root_dir: "{{ variable_mysql_backup_root_dir | default('/datadrive') }}"
    mysql_backup_dir: "{{ backup_root_dir }}/mysql_backups"
    backup_date: "{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}"
    s3_base_path: "{{ variable_s3_bucket_name }}/Linode-Backups/{{ lang_code }}/{{ backup_date }}"
    ghost_version: "3.42.9"
    ghost_cli_version: "1.26.1"
    backup_retention_days: "{{ variable_backup_retention_days | default('15') }}"
    max_retries: 3
    retry_delay: 5

  handlers:
    - name: Restart Ghost
      become: true
      shell:
        cmd: ghost start
        chdir: /var/www/ghost
        executable: /bin/bash

  roles:
    - role: rolehippie.rclone
      vars:
        rclone_version: "1.67.0"
      become: true
      become_method: sudo
      become_user: root

  tasks:
    - name: Set ignore flag for English Ghost Server
      set_fact:
        ignore_run: "{{ lang_code == 'eng' }}"

    - name: Set database name
      set_fact:
        db_name: "{% if lang_code == 'eng' %}ghost_prod{% else %}ghost_{{ lang_code }}{% endif %}"

    - name: Execute backup tasks
      block:
        - name: Install MySQL client
          become: true
          become_method: sudo
          become_user: root
          package:
            name: mysql-client
            state: present
            update_cache: true

        - name: Check Ghost version
          shell:
            cmd: ghost --version
            chdir: /var/www/ghost
          register: ghost_version_output
          changed_when: false

        - name: Verify Ghost and Ghost CLI versions
          when: not ignore_run
          assert:
            that:
              - ghost_version_output.stdout is search('Ghost version:' + ' ' + ghost_version)
              - ghost_version_output.stdout is search('Ghost-CLI version:' + ' ' + ghost_cli_version)
            fail_msg: "Ghost or Ghost CLI version mismatch"
            success_msg: "Ghost and Ghost CLI versions are correct"

        - name: Check if Rclone config for AWS S3 exists
          shell:
            cmd: rclone config show s3
          register: rclone_config_check
          changed_when: false
          failed_when: false

        - name: Create Rclone config for AWS S3 if not exists
          shell:
            cmd: |
              rclone config create s3 s3 \
              access_key_id={{ variable_aws_access_key_id }} \
              secret_access_key={{ variable_aws_secret_access_key }} \
              region=us-east-1 \
              endpoint=https://s3.us-east-1.amazonaws.com \
              provider=AWS \
              no_check_bucket=true
            executable: /bin/bash
          when: rclone_config_check.rc != 0
          # no_log: true

        - name: Create backup directory
          file:
            path: "{{ mysql_backup_dir }}"
            state: directory
            mode: "0755"

        - name: Stop Ghost
          become: true
          shell:
            cmd: ghost stop
            chdir: /var/www/ghost
            executable: /bin/bash

        - name: Backup the Database
          shell:
            cmd: |
              mysqldump \
              -u"{{ variable_mysql_db_root_user }}" \
              -p"{{ variable_mysql_db_root_password }}" \
              -h"{{ variable_mysql_db_root_host }}" \
              --single-transaction \
              --protocol=tcp \
              --column-statistics=0 \
              --set-gtid-purged=OFF \
              {{ db_name }} > mysql-backup-{{ lang_code }}-$(date +"%Y-%m-%d_%H-%M-%S").sql
            chdir: "{{ mysql_backup_dir }}"
            executable: /bin/bash
          register: backup_database
          changed_when: backup_database.rc == 0
          # no_log: true

        - name: Execute S3 sync tasks for non-English Ghost instances
          when: not ignore_run
          block:
            - name: Backup the Content and Config
              shell:
                cmd: |
                  rclone sync /datadrive/content s3:{{ s3_base_path }}/content \
                  --exclude=/logs/** \
                  --checksum \
                  --s3-no-check-bucket
                executable: /bin/bash
              register: backup_content
              changed_when: backup_content.stdout is search("Transferred")
              retries: "{{ max_retries }}"
              delay: "{{ retry_delay }}"
              until: backup_content is success

            - name: Copy config file
              shell:
                cmd: |
                  rclone copy /var/www/ghost/config.production.json \
                  s3:{{ s3_base_path }}/config/ \
                  --checksum \
                  --s3-no-check-bucket
                executable: /bin/bash
              register: backup_config
              changed_when: backup_config.stdout is search("Transferred")
              retries: "{{ max_retries }}"
              delay: "{{ retry_delay }}"
              until: backup_config is success

            - name: Sync database backup to S3
              shell:
                cmd: |
                  rclone sync . \
                  "s3:{{ s3_base_path }}/database/" \
                  --include "mysql-backup-{{ lang_code }}-*.sql" \
                  --checksum \
                  --s3-no-check-bucket
                chdir: "{{ mysql_backup_dir }}"
                executable: /bin/bash
              register: sync_database_backup
              changed_when: sync_database_backup.stdout is search("Transferred")
              retries: "{{ max_retries }}"
              delay: "{{ retry_delay }}"
              until: sync_database_backup is success

            - name: Verify backup integrity
              shell:
                cmd: |
                  rclone check "{{ mysql_backup_dir }}" \
                  "s3:{{ s3_base_path }}/database/" \
                  --include "mysql-backup-{{ lang_code }}-*.sql" \
                  --s3-no-check-bucket
                executable: /bin/bash
              changed_when: false

        - name: Find and remove old backups
          block:
            - name: Find backups older than {{ backup_retention_days }} days
              find:
                paths: "{{ mysql_backup_dir }}"
                patterns: "mysql-backup-*.sql"
                age: "{{ backup_retention_days }}d"
                file_type: file
              register: old_backups

            - name: Remove old backups
              file:
                path: "{{ item.path }}"
                state: absent
              loop: "{{ old_backups.files }}"
              when: old_backups.files | length > 0

      rescue:
        - name: Ensure Ghost is restarted on failure
          become: true
          shell:
            cmd: ghost start
            chdir: /var/www/ghost
            executable: /bin/bash

      always:
        - name: Ensure Ghost is restarted
          become: true
          shell:
            cmd: ghost start
            chdir: /var/www/ghost
            executable: /bin/bash
