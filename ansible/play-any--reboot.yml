---
- name: Reboot a machine and wait for it to come back
  hosts: "{{ variable_host | default('null') }}"
  serial: '{{ variable_serial | default(1) }}'
  gather_facts: true
  become: true
  become_user: root
  vars:
    # Set force_reboot to True to force a reboot â€” mind the quotes!
    force_reboot: '{{ variable_force_reboot | default(False) }}'
  tasks:
    - name: Check if /var/run/reboot-required exists
      register: reboot_required
      stat:
        path: /var/run/reboot-required
        get_checksum: false

    # Reboot for the following reasons:
    # 1. /var/run/reboot-required exists (e.g. kernel update)
    # 2. Uptime is greater than 7 days
    # 3. force_reboot is set to True
    - name: Display Status
      debug:
        msg:
          - 'Debug info:'
          - '  Force Reboot Flag: {{ force_reboot }}'
          - '  Reboot Required File Exists: {{ reboot_required.stat.exists }}'
          - '  Uptime: {{ ansible_facts.uptime_seconds/86400 }} days'

    - name: Set Should Reboot
      set_fact:
        should_reboot: >-
          {{ (force_reboot | bool) or
             (reboot_required.stat.exists) or
             (ansible_facts.uptime_seconds > 604800) }}
        reboot_reason: >-
          {%- set reasons = [] -%} {%- if force_reboot | bool -%}
            {%- set reasons = reasons + ['manual force reboot requested'] -%}
          {%- endif -%} {%- if reboot_required.stat.exists -%}
            {%- set reasons = reasons + ['kernel update or package requires
          reboot'] -%} {%- endif -%} {%- if ansible_facts.uptime_seconds >
          604800 -%}
            {%- set reasons = reasons + ['system uptime exceeds 7 days'] -%}
          {%- endif -%} {%- if reasons|length == 0 -%}
            No reboot needed
          {%- else -%}
            {{ reasons|join(', ') }}
          {%- endif -%}

    - name: Print Reboot Reason
      debug:
        msg:
          'Rebooting the machine: {{ inventory_hostname }} - Reason: {{
          reboot_reason }}'
      when: should_reboot

    - name: Conditionally Reboot
      block:
        - name: Reboot machine
          ansible.builtin.reboot:
            connect_timeout: 60
            reboot_timeout: 600
            pre_reboot_delay: 5
            post_reboot_delay: 30
            test_command: uptime
            msg: 'Reboot initiated by Ansible'
          register: reboot_result
          ignore_unreachable: true

        - name: Wait for machine to become reachable again
          wait_for_connection:
            delay: 10
            timeout: 300

        - name: Gather facts after reboot
          setup:

      when: should_reboot
      ignore_errors: '{{ ansible_check_mode }}'
